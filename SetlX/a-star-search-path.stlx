// This procedure implements the A* search algorithm.
aStarSearch := procedure(start, goal, nextStates, heuristic) {
    estGoal  := heuristic(start, goal);
    Estimate := { [start, estGoal] }; // estimated total distance
    Frontier := { [estGoal, start] }; // priority queue, ordered by estimated total distance
    PathDict := { [start, [start]] }; // PathDict[s] is a path from start to s 
    Distance := { [start, 0]       }; // Distance[s] is the length of this path
    Explored := {};                   
    while (Frontier != {}) {
        [_, state] := fromB(Frontier);
        Explored   += { state };
        if (state == goal) {
            return PathDict[state];
        }
        stateDist := Distance[state];
        for (neighbour in nextStates(state)) {
            oldEstimate := Estimate[neighbour];
            newEstimate := stateDist + 1 + heuristic(neighbour, goal);
            if (oldEstimate == om || newEstimate < oldEstimate) {
                Estimate[neighbour] := newEstimate;
                Frontier            += { [newEstimate, neighbour] };
                PathDict[neighbour] := PathDict[state] + [neighbour];
                Distance[neighbour] := stateDist + 1;
                if (oldEstimate != om) {
                    Frontier -= { [oldEstimate, neighbour] };
                }
            }
        }
    }
};
